name: dcgm
base: core24
adopt-info: dcgm
summary: Snap for NVIDIA DCGM and DCGM-Exporter
license: Apache-2.0
contact: solutions-engineering@lists.canonical.com
icon: snap/local/nvidia-logo-square-wht.svg
description: |
  This snap includes NVIDIA DCGM and DCGM-Exporter to manage and monitor NVIDIA GPUs via the CLI or via Prometheus metrics.
  Grafana dashboards can then be used to visualize the exported metrics, see for example:\
  https://grafana.com/grafana/dashboards/12239-nvidia-dcgm-exporter-dashboard/

  The snap includes the following components:
  - DCGM: Data Center GPU Manager
  - DCGM-Exporter: a Prometheus exporter for DCGM metrics

  Please see the links at the bottom of the page for more details about the included components and their purpose.

  **How-To**
  ---

  **How to select a channel:**

  You need to have NVIDIA drivers installed on your system to use this snap.\
  You can check the version of your NVIDIA driver with the command:

     cat /proc/driver/nvidia/version

  With that information, you can check the compatible CUDA version here:\
  https://docs.nvidia.com/deploy/cuda-compatibility/minor-version-compatibility.html

  Keep in mind that:
  DCGM v4 has different releases for different CUDA versions. E.g. if your system has the Driver\
  version >= 580 it uses CUDA 13, so you should install the snap from the channel `v4-cuda13`

     sudo snap install dcgm --channel=v4-cuda13/stable

  DCGM v3 ships a single package with binaries that works from CUDA 10 up to CUDA 12.

  **How to install the snap:**

     sudo snap install dcgm --channel=<CHANNEL>

  **How to enable metrics collection:**

     # Start the DCGM-Exporter service (disabled by default)
     sudo snap start dcgm.dcgm-exporter

     # Get the metrics
     curl -s localhost:9400/metrics

  **How to configure the snap services:**

  The NV-Hostengine and DCGM-Exporter services can be configured via the `snap` CLI.\
  For example:

     # Get all the configuration options
     sudo snap get dcgm

     # Set the NV-Hostengine port
     sudo snap set dcgm nv-hostengine-port=5577

     # Restart the NV-Hostengine service to apply the changes
     sudo snap restart dcgm.nv-hostengine

  **Reference**
  ---

  Available configurations options:

  - `nv-hostengine-port`: the port on which the NV-Hostengine listens.
    The default is `5555`.
  - `dcgm-exporter-address`: the address DCGM-Exporter binds to.
    The default is `:9400`.
  - `dcgm-exporter-metrics-file`: the name of a custom CSV metrics file to be loaded by the exporter.
    The path is assumed to be `/var/snap/dcgm/common/`.
    The default metrics are located in `/snap/dcgm/current/etc/dcgm-exporter/default-counters.csv`.
    Please refer to the DCGM-Exporter repository link at the bottom of the page for more information on the CSV file format.

  **Cryptography**
  ---

  During the snap build process, snapcraft downloads the CUDA keyring deb package using `curl` over HTTPS and verifies its integrity using SHA256 checksums.
  The CUDA keyring deb package is then used to set up the appropriate source for the DCGM deb package, whose signature is verified using the keyring.\
  For more information, see the CUDA keyring repository link and `curl` documentation at the bottom of the page.

  **Links**
  ---
  Upstream DCGM-Exporter repository\
  https://github.com/NVIDIA/dcgm-exporter

  Upstream DCGM repository\
  https://github.com/NVIDIA/DCGM

  DCGM Documentation\
  https://docs.nvidia.com/datacenter/dcgm/latest/user-guide/index.html

  Available NVIDIA GPU metrics\
  https://docs.nvidia.com/datacenter/dcgm/latest/dcgm-api/dcgm-api-field-ids.html

  Repository for the CUDA keyring and DCGM deb package\
  https://developer.download.nvidia.com/compute/cuda/repos/

  curl Documentation\
  https://curl.se/docs/manpage.html

platforms:
  amd64:
    build-on: [amd64]
    build-for: [amd64]
  arm64:
    build-on: [arm64]
    build-for: [arm64]
environment:
  NVVS_BIN_PATH: $SNAP/usr/share/nvidia-validation-suite/
grade: stable
confinement: strict
source-code: https://github.com/canonical/dcgm-snap
issues: https://github.com/canonical/dcgm-snap/issues
title: NVIDIA DCGM

apps:
  dcgm-exporter:
    command: bin/run_dcgm_exporter.sh
    plugs:
      - network-bind
      - opengl
      - hardware-observe
    daemon: simple
    # As this is a dcgm snap, not the dcgm-exporter snap,
    # user might not be interested in running dcgm-exporter, so disable it by default
    install-mode: disable
    restart-condition: on-failure
  dcgmi:
    command: usr/bin/dcgmi
    plugs:
      - network-bind
      - opengl
      - hardware-observe
  nv-hostengine:
    command: bin/run_nv_hostengine.sh
    plugs:
      - network-bind
      - opengl
      - hardware-observe
    daemon: simple
    restart-condition: on-abort
    environment:
      DCGM_HOME_DIR: "${SNAP_COMMON}"
  dcgmproftester:
    command: usr/bin/dcgmproftester${CUDA_VERSION}
    plugs:
      - network-bind
      - opengl
      - hardware-observe

parts:
  # This is a workaround to package-repositories not supporting multiple architectures
  # See https://forum.snapcraft.io/t/can-package-repositories-depend-on-architecture/27820
  cuda-sources:
    plugin: nil
    source: snap/local/scripts
    override-pull: |
      craftctl default
      ./configure_sources.sh

  # This is the actual DCGM software. We don't build from source because the build
  # process is very cumbersome and requires docker
  # The deb is pulled from the sources configured in the cuda-sources part
  dcgm:
    after:
      - cuda-sources
    plugin: nil

    build-packages:
      - git

    override-pull: |
      craftctl default
      apt download datacenter-gpu-manager-4-cuda${CUDA_VERSION}=1:4.4.1-1
      apt download $(apt-cache depends datacenter-gpu-manager-4-cuda${CUDA_VERSION} | awk '/Depends:/ {print $2}')

    override-build: |
      craftctl default
      dpkg-deb -x datacenter-gpu-manager-4-cuda${CUDA_VERSION}_*.deb $SNAPCRAFT_PART_INSTALL/
      dpkg-deb -x datacenter-gpu-manager-4-core*.deb $SNAPCRAFT_PART_INSTALL/

    # override prime to set version
    override-prime: |
      craftctl default
      # Locate dcgm .deb file
      DEB_FILE=$(ls $HOME/parts/dcgm/src/datacenter-gpu-manager-4-cuda*.deb)

      # Extract the version from the .deb file
      DCGM_VERSION=$(dpkg-deb -f "$DEB_FILE" Version)
      GIT_VERSION=$(git -C $CRAFT_PROJECT_DIR describe --always)

      # Set the Snap version to the same as dcgm deb file
      craftctl set version="${CUDA_VERSION}-${DCGM_VERSION#1:}-${GIT_VERSION}"

  # This is the DCGM exporter
  dcgm-exporter:
    plugin: nil
    stage-packages:
      - datacenter-gpu-manager-exporter=4.5.2-1

  # wrappers supporting snap options
  wrapper:
    plugin: dump
    source: snap/local/files
    organize:
      run_nv_hostengine.sh: bin/
      run_dcgm_exporter.sh: bin/

layout:
  /etc/dcgm-exporter:
    symlink: $SNAP/etc/dcgm-exporter
  /usr/lib/x86_64-linux-gnu/libdcgm.so.4:
    bind-file: $SNAP/usr/lib/x86_64-linux-gnu/libdcgm.so.4.4.1
  /usr/libexec/datacenter-gpu-manager-4:
    bind: $SNAP/usr/libexec/datacenter-gpu-manager-4
